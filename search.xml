<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[CSS禅意花园示范作]]></title>
      <url>//blog.tiy.xyz/posts/2017/3721315630/</url>
      <content type="html"><![CDATA[<!-- 摘要 -->
<p>CSS禅意花园初试，仅供学习，欢迎交流（文末有链接哦）</p>
<a id="more"></a>
<h2><span id="花语">花语</span></h2>
<p>传说有一位美丽端庄、冰清玉洁的女孩。因为她的温柔贤淑，村里的人都很喜欢她。有一年年初，气候寒冷，村庄遭受了严重的冰灾，春天迟迟不来，人们把过冬的粮食都吃光了。看着大家饿得倒下，冰凌花心急如焚，向上苍祈祷：“伟大的上苍，快让田野里长出也才吧。救救孩子们，救救老人们，救救大家吧!” 上苍听了非常感动。</p>
<p>一天晚上，女孩在梦里梦见了一位白胡子老爷爷对她说：“你能光着脚在冰雪里走遍山川田野吗？” “能”，冰凌花坚定的回答到。说完，老爷爷就递给了她一包种子。然后老爷爷就消失不见了。当她醒来的时候，发现自己的手里有一包种子。她光着脚跑向了田野，一边跑一边回头把种子撒在她的脚印里，脚底的鲜血滋润着种子，不一会就长出了小绿芽。接着就看见一朵朵黄色的小花从雪地里探出头来。</p>
<p>这些小花拯救了全村人的性命。</p>
<h2><span id="然之">然之</span></h2>
<p>众所周知，“CSS禅意花园”，无论是CSS从入门到精通（放弃？），还是深入浅出CSS系列，她都是令人难以忘怀的经典。</p>
<p>所以，近期带着滔滔江水之情，试手了这次初探之作。</p>
<h2><span id="附言">附言</span></h2>
<p>仅此一人？ No No No，佳人相伴才能有心望月。3年同窗，即是故交，亦是新知。 —— 致亲爱的大鹏</p>
<p>前期先大致实现视觉稿的还原，后期再进行适配和兼容调整等优化。So，目前需在现代较新浏览器下浏览才能达到最佳效果。</p>
<h2><span id="吐槽">吐槽</span></h2>
<ol>
<li>内容：同行的小伙伴都应该（需要）知道，CSS禅意花园的规则：<strong>同一份HTML代码</strong>，用<strong>不同的CSS样式</strong>创造天下。那么问题来了，由于小伙伴可能对于代码的不熟悉，偏向于UI的调整，忽视了实际代码无法改变的从上到下的顺序和文章内容结构，这带来了一些小麻烦：
<ul>
<li>比如截取两个独立section中的内容合并为第三者？</li>
<li>同一个section中的内容，一个放在右边自成一体，另一个放在左下边当作点缀，还好机智的我没有放弃治疗（英俊脸）</li>
<li>上下颠倒两个section的位置（内容高度不固定）</li>
</ul>
</li>
<li>字体：设计稿中有几种不同的字体，很不幸的在我的电脑上都不存在（相信大部分人也不存在，来咬我呀），在打开PSD的时候文字提示框点击“不要解决”我其实是拒绝的，得准备讨论一下（迷茫脸）</li>
<li>貌似定死的1080p宽屏稿让我有点忧伤</li>
<li>奇淫技巧当然还得过奇淫浏览器的关啦（深沉脸）</li>
</ol>
<h2><span id="重点">重点</span></h2>
<p>重点当然是链接啦，无图无真相（调皮脸）</p>
<p><a href="/showcase/csszengarden/001">CSS禅意花园初试</a></p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript知识点]]></title>
      <url>//blog.tiy.xyz/posts/2016/3711766572/</url>
      <content type="html"><![CDATA[<!-- 摘要 -->
<p>JavaScript知识点</p>
<a id="more"></a>
<h2><span id="命名空间">命名空间</span></h2>
<blockquote>
<p>在JavaScript中，命名空间只是另一个包含方法、属性和对象的对象。</p>
</blockquote>
<h2><span id="变量">变量</span></h2>
<blockquote>
<p>JavaScript 中局部变量只可能通过两种方式声明，一个是作为函数参数，另一个是通过 var 关键字声明。</p>
</blockquote>
<p><code>undefined</code></p>
<blockquote>
<p>在 JavaScript 中 undefined 是一个<strong>变量</strong>，注意是变量不是关键字。
undefined 是一个值为 undefined 的类型。
这个语言也定义了一个全局变量，它的值是 undefined，这个变量也被称为 undefined。
但是这个变量不是一个常量，也不是一个关键字。这意味着它的值可以轻易被覆盖。
由于全局变量 undefined 只是保存了 undefined 类型实际值的副本， 因此对它赋新值不会改变类型 undefined 的值。</p>
</blockquote>
<h2><span id="对象">对象</span></h2>
<blockquote>
<p>一个对象的属性名可以是任何有效的JavaScript字符串,或者可以被转换为字符串的任何东西，包括空字符串。然而，一个属性的名称如果不是一个有效的 JavaScript 标识符（例如，一个有空格或短横线，或者以数字开头的属性名），就只能通过方括号标记访问。这个标记法在属性名称是动态判定（属性名只有到运行时才能判定）时非常有用。例如：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = <span class="keyword">new</span> <span class="built_in">Object</span>(),</span><br><span class="line">    str   = <span class="string">"myString"</span>,</span><br><span class="line">    rand  = <span class="built_in">Math</span>.random(),</span><br><span class="line">    obj   = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">myObj.type              = <span class="string">"Dot syntax"</span>;</span><br><span class="line">myObj[<span class="string">"date created"</span>]   = <span class="string">"String with space"</span>;</span><br><span class="line">myObj[str]              = <span class="string">"String value"</span>;</span><br><span class="line">myObj[rand]             = <span class="string">"Random Number"</span>;</span><br><span class="line">myObj[obj]              = <span class="string">"Object"</span>;</span><br><span class="line">myObj[<span class="string">""</span>]               = <span class="string">"Even an empty string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObj);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果一个对象是通过在顶级脚本的对象初始化器创建的，则JavaScript在每次遇到包含该对象字面量的表达式时都会创建对象。同样的，在函数中的初始化器在每次函数调用时也会被创建。</p>
</blockquote>
<blockquote>
<p>所有的 JavaScript 对象继承于至少一个对象。被继承的对象被称作原型，并且继承的属性可能通过构造函数的 prototype 对象找到。</p>
</blockquote>
<h2><span id="原型链继承">原型链继承</span></h2>
<p>要提防原型链过长带来的性能问题，并知道如何通过缩短原型链来提高性能。
更进一步，绝对不要扩展内置类型的原型，除非是为了和新的 JavaScript 引擎兼容。</p>
<h2><span id="不要使用eval">不要使用Eval</span></h2>
<blockquote>
<p>eval 只在被直接调用并且调用函数就是 eval 本身时，才在当前作用域中执行。
也就是说，其他情况都是在全局作用域中执行。</p>
</blockquote>
<blockquote>
<p>在任何情况下我们都应该避免使用 eval 函数。99.9% 使用 eval 的场景都有不使用 eval 的解决方案。</p>
</blockquote>
<h2><span id="数据类型">数据类型</span></h2>
<h3><span id="字符串">字符串</span></h3>
<blockquote>
<p>除 Object 以外的所有类型都是不可变的（值本身无法被改变）。例如，与C语言不同，JavaScript中字符串是不可变的（译注：如，JavaScript 中对字符串的操作一定返回了一个新字符串，原始字符串并没有被改变）。我们称这些类型的值为“原始值”。
JavaScript 字符串是不可更改的。这意味着字符串一旦被创建，就不能被修改。但是，可以基于对原始字符串的操作来创建新的字符串。</p>
</blockquote>
<blockquote>
<p>除非必要, 应该尽量使用String字面值, 因为String对象的某些行为可能并不与直觉一致. 举例:</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">"2 + 2"</span>; <span class="comment">// Creates a string literal value</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"2 + 2"</span>); <span class="comment">// Creates a String object</span></span><br><span class="line"><span class="built_in">eval</span>(s1); <span class="comment">// Returns the number 4</span></span><br><span class="line"><span class="built_in">eval</span>(s2); <span class="comment">// Returns the string "2 + 2"</span></span><br></pre></td></tr></table></figure>
<h2><span id="数字和日期">数字和日期</span></h2>
<blockquote>
<p>在JavaScript里面，数字都是双精度浮点类型的（也就是说一个数字只能在 -(2^53 -1) 和 2^53 -1之间）。没有特定的数据类型为整型。</p>
</blockquote>
<h3><span id="十进制数字">十进制数字</span></h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234567890</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="comment">// 数字第一个为零的注意事项：</span></span><br><span class="line"></span><br><span class="line"><span class="number">0888</span> <span class="comment">// 888 将被当做十进制处理</span></span><br><span class="line"><span class="number">0777</span> <span class="comment">// 在非严格格式下会被当做八进制处理 (用十进制表示就是511)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请注意，十进制可以以0开头，后面接其他十进制数字，但是假如后面接的十进制数字小于8，那么该数字将会被当做八进制处理。</span></span><br></pre></td></tr></table></figure>
<h3><span id="二进制数字">二进制数字</span></h3>
<blockquote>
<p>二进制数字语法是以零为开头，后面接一个小写或大写的拉丁文字母B(0b或者是0B)。  假如0b后面的数字不是0或者1，那么就会提示这样的语法错误（ SyntaxError）： &quot;Missing binary digits after 0b&quot;。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> FLT_SIGNBIT  = <span class="number">0b10000000000000000000000000000000</span>; <span class="comment">// 2147483648</span></span><br></pre></td></tr></table></figure>
<h3><span id="八进制数字">八进制数字</span></h3>
<blockquote>
<p>八进制数字语法是以0为开头的。假如0后面的数字不在0到7的范围内，改数字将会被转换成十进制数字。</p>
</blockquote>
<h3><span id="十六进制数字">十六进制数字</span></h3>
<blockquote>
<p>十六进制数字语法是以零为开头，后面接一个小写或大写的拉丁文字母X(0x或者是0X)。</p>
</blockquote>
<h2><span id="数组">数组</span></h2>
<blockquote>
<p>如果在创建数组时给数组操作符的是一个非整形数值（如3.4），那么它将作为一个代表数组的对象的属性创建，而非作为数组的元素。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr[<span class="number">3.4</span>] = <span class="string">"Oranges"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr.length);                <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.hasOwnProperty(<span class="number">3.4</span>));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>数组操作符（方括号）也可以用来访问数组的属性(在JavaScript中，数组也是对象)。例如：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>];</span><br><span class="line">arr[<span class="number">2</span>];  <span class="comment">// three</span></span><br><span class="line">arr[<span class="string">"length"</span>];  <span class="comment">// 3, equal to: arr.length</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>数组操作方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">push()    <span class="comment">// 在数组'末尾'添加一个或多个元素，并返回数组操作后的新长度。</span></span><br><span class="line">unshift() <span class="comment">// 在数组'开头'添加一个或多个元素，并返回数组的新长度。</span></span><br><span class="line">pop()     <span class="comment">// 从数组移出'最后一个'元素，并返回该元素。</span></span><br><span class="line">shift()   <span class="comment">// 从数组移出'第一个'元素，并返回该元素。</span></span><br><span class="line"></span><br><span class="line">slice(start_index, upto_index) <span class="comment">// 从数组提取一个片段，并作为一个新数组返回。</span></span><br><span class="line">splice(index, count_to_remove, addElement1, addElement2, ...) <span class="comment">// 从数组移出一些元素，（可选）并替换它们。</span></span><br><span class="line"></span><br><span class="line">reverse() <span class="comment">// 颠倒数组元素的顺序：第一个变成最后一个，最后一个变成第一个。</span></span><br><span class="line">sort()    <span class="comment">// 给数组元素排序。</span></span><br><span class="line"></span><br><span class="line">indexOf(searchElement[, fromIndex])     <span class="comment">// 在数组中搜索searchElement 并返回第一个匹配的索引。</span></span><br><span class="line">lastIndexOf(searchElement[, fromIndex]) <span class="comment">// 和 indexOf差不多，但是是从结尾开始，并且是反向搜索。</span></span><br><span class="line"></span><br><span class="line">forEach(callback[, thisObject]) <span class="comment">// 在数组'每个元素'项上执行callback。</span></span><br><span class="line">map(callback[, thisObject])     <span class="comment">// 在数组的每个单元项上执行callback函数，并返回包含回调函数返回值的新数组。</span></span><br><span class="line">filter(callback[, thisObject])  <span class="comment">// 返回一个包含所有在回调函数上返回为true的元素的新数组。</span></span><br><span class="line"></span><br><span class="line">every(callback[, thisObject]) <span class="comment">// 当数组中'每一个元素'在callback上被返回true时就返回true。</span></span><br><span class="line">some(callback[, thisObject])  <span class="comment">// 数组中'只要有一项'在callback上被返回true，就返回true。</span></span><br></pre></td></tr></table></figure>
<h3><span id="理解数组的length">理解数组的length</span></h3>
<blockquote>
<p>在实施层面，JavaScript实际上是将元素作为标准的对象属性来存储，把数组索引作为属性名。长度属性是特殊的，它总是返回最后一个元素的索引值加1(下例中， Dusty 的索引是30，所以cats.length 返回 30 + 1)。  记住，JavaScript数组索引是基于0的:他们从0开始，而不是1。这意味着数组长度属性将比最大的索引值大1:</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cats = [];</span><br><span class="line">cats[<span class="number">30</span>] = [<span class="string">'Dusty'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(cats.length); <span class="comment">// 31</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>你也可以分配length属性。写一个小于数组元素数量的值会缩短数组，写0会彻底清空数组：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cats = [<span class="string">'Dusty'</span>, <span class="string">'Misty'</span>, <span class="string">'Twiggy'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(cats.length); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">cats.length = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cats); <span class="comment">// logs "Dusty,Misty" - Twiggy has been removed</span></span><br><span class="line"></span><br><span class="line">cats.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cats); <span class="comment">// logs nothing; the cats array is empty</span></span><br><span class="line"></span><br><span class="line">cats.length = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cats); <span class="comment">// [undefined, undefined, undefined]</span></span><br></pre></td></tr></table></figure>
<h2><span id="遍历">遍历</span></h2>
<blockquote>
<p>for in 循环不会遍历那些 enumerable 设置为 false 的属性；比如数组的 length 属性。
for in 总是要遍历整个原型链，因此如果一个对象的继承层次太深的话会影响性能。</p>
</blockquote>
<blockquote>
<p>总结：为了更好的性能，推荐使用普通的 for 循环并缓存数组的 length 属性。
使用 for in 遍历数组被认为是不好的代码习惯并倾向于产生错误和导致性能问题。</p>
</blockquote>
<h2><span id="settimeout-和-setinterval">setTimeout 和 setInterval</span></h2>
<blockquote>
<p>基于 JavaScript 引擎的计时策略，以及本质上的单线程运行方式，所以其它代码的运行可能会阻塞此线程。
因此没法确保函数会在 setTimeout 指定的时刻被调用。</p>
</blockquote>
<blockquote>
<p>作为第一个参数的函数将会在全局作用域中执行，因此函数内的 this 将会指向这个全局对象。</p>
</blockquote>
<blockquote>
<p>setTimeout 和 setInterval 也接受第一个参数为字符串的情况。
这个特性绝对不要使用，因为它在内部使用了 eval。</p>
</blockquote>
<h2><span id="参考">参考</span></h2>
<p><a href="//developer.mozilla.org/zh-CN/docs/Web/JavaScript">MDN</a><br>
<a href="//bonsaiden.github.io/JavaScript-Garden/zh">JavaScript 秘密花园</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 知识点 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript编码习惯和技巧]]></title>
      <url>//blog.tiy.xyz/posts/2016/1104843291/</url>
      <content type="html"><![CDATA[<!-- 摘要 -->
<p>JavaScript编码习惯和技巧</p>
<a id="more"></a>
<h2><span id="运用-和ampamp运算符">运用 || 和&amp;&amp;运算符</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;</span><br><span class="line">foo == <span class="number">10</span> &amp;&amp; doSomething(); <span class="comment">// is the same thing as if (foo == 10) doSomething();</span></span><br><span class="line">foo == <span class="number">5</span> || doSomething(); <span class="comment">// is the same thing as if (foo != 5) doSomething();</span></span><br></pre></td></tr></table></figure>
<h2><span id="运用-运算符">运用 | 运算符</span></h2>
<p>在js整数操作的时候，相当于去除小数点（取整），parseInt。在正数的时候相当于Math.floor()，负数的时候相当于Math.ceil()<br>
<em>[<a href="//www.haorooms.com/post/js_dsg_ysf">REF</a>]</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil()  用作向上取整。</span><br><span class="line"><span class="built_in">Math</span>.floor() 用作向下取整。</span><br><span class="line"><span class="built_in">Math</span>.round() 我们数学中常用到的四舍五入取整。</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.6</span>|<span class="number">0</span>)<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1.1</span>|<span class="number">0</span>)<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3.65555</span>|<span class="number">0</span>)<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5.99999</span>|<span class="number">0</span>)<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-7.777</span>|<span class="number">0</span>)<span class="comment">//-7</span></span><br></pre></td></tr></table></figure>
<p>同理有：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n&lt;&lt;<span class="number">0</span></span><br><span class="line">n&gt;&gt;<span class="number">0</span></span><br><span class="line">~~n</span><br></pre></td></tr></table></figure>
<h2><span id="用map遍历处理数组">用map遍历处理数组</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> squares = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val * val;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// squares will be equal to [1, 4, 9, 16]</span></span><br></pre></td></tr></table></figure>
<h2><span id="浮点数处理">浮点数处理</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">2.443242342</span>;</span><br><span class="line">num = num.toFixed(<span class="number">4</span>);  <span class="comment">// num will be equal to 2.4432</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// is false, 0.30000000000000004 instead.</span></span><br><span class="line"><span class="number">9007199254740992</span> + <span class="number">1</span> <span class="comment">// is equal to 9007199254740992</span></span><br><span class="line"><span class="number">9007199254740992</span> + <span class="number">2</span> <span class="comment">// is equal to 9007199254740994</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//use toFixed() or toPrecision() to solve this problem</span></span><br><span class="line"><span class="comment">//NOTE : the toFixed() and toPrecision() function returns a string, not a number.</span></span><br></pre></td></tr></table></figure>
<h2><span id="用而不是">用'==='而不是'=='</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">10</span>] === <span class="number">10</span>    <span class="comment">// is false</span></span><br><span class="line">[<span class="number">10</span>] ==  <span class="number">10</span>    <span class="comment">// is true</span></span><br><span class="line"><span class="string">'10'</span> ==  <span class="number">10</span>    <span class="comment">// is true</span></span><br><span class="line"><span class="string">'10'</span> === <span class="number">10</span>    <span class="comment">// is false</span></span><br><span class="line"> []  ==  <span class="number">0</span>     <span class="comment">// is true</span></span><br><span class="line"> []  === <span class="number">0</span>     <span class="comment">// is false</span></span><br><span class="line"> <span class="string">''</span>  ==  <span class="literal">false</span> <span class="comment">// is true but true == "a" is false</span></span><br><span class="line"> <span class="string">''</span>  === <span class="literal">false</span> <span class="comment">// is false</span></span><br><span class="line"></span><br><span class="line"> <span class="string">""</span>        == <span class="string">"0"</span>       <span class="comment">// false</span></span><br><span class="line"> <span class="number">0</span>         == <span class="string">""</span>        <span class="comment">// true</span></span><br><span class="line"> <span class="number">0</span>         == <span class="string">"0"</span>       <span class="comment">// true</span></span><br><span class="line"> <span class="literal">false</span>     == <span class="string">"false"</span>   <span class="comment">// false</span></span><br><span class="line"> <span class="literal">false</span>     == <span class="string">"0"</span>       <span class="comment">// true</span></span><br><span class="line"> <span class="literal">false</span>     == <span class="literal">undefined</span> <span class="comment">// false</span></span><br><span class="line"> <span class="literal">false</span>     == <span class="literal">null</span>      <span class="comment">// false</span></span><br><span class="line"> <span class="literal">null</span>      == <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"> <span class="string">" \t\r\n"</span> == <span class="number">0</span>         <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>有趣的现象： &quot;&quot; == &quot;0&quot; 且 0 == &quot;0&quot;，但是 &quot;&quot; == 0 为false，当然这是js隐式转换的问题</p>
<h2><span id="布尔型转换">布尔型转换</span></h2>
<blockquote>
<p>通过使用 否 操作符两次，可以把一个值转换为布尔型。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="string">'foo'</span>;   <span class="comment">// true</span></span><br><span class="line">!!<span class="string">''</span>;      <span class="comment">// false</span></span><br><span class="line">!!<span class="string">'0'</span>;     <span class="comment">// true</span></span><br><span class="line">!!<span class="string">'1'</span>;     <span class="comment">// true</span></span><br><span class="line">!!<span class="string">'-1'</span>     <span class="comment">// true</span></span><br><span class="line">!!&#123;&#125;;      <span class="comment">// true</span></span><br><span class="line">!!<span class="literal">true</span>;    <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2><span id="用switch处理判断truefalse">用switch处理判断(true/false)</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCategory</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> category = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">isNaN</span>(age):</span><br><span class="line">      category = <span class="string">"not an age"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> (age &gt;= <span class="number">50</span>):</span><br><span class="line">      category = <span class="string">"Old"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> (age &lt;= <span class="number">20</span>):</span><br><span class="line">      category = <span class="string">"Baby"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      category = <span class="string">"Young"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> category;</span><br><span class="line">&#125;</span><br><span class="line">getCategory(<span class="number">5</span>);  <span class="comment">// will return "Baby"</span></span><br></pre></td></tr></table></figure>
<h2><span id="尽量用原生表达式而不是函数调用">尽量用原生表达式而不是函数调用</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min(a,b);</span><br><span class="line">A.push(v);</span><br><span class="line"></span><br><span class="line"><span class="comment">//below is better</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> min = a &lt; b ? a : b;</span><br><span class="line">A[A.length] = v;</span><br></pre></td></tr></table></figure>
<h2><span id="数组连接">数组连接</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vegetables = [<span class="string">'parsnip'</span>, <span class="string">'potato'</span>];</span><br><span class="line"><span class="keyword">var</span> moreVegs = [<span class="string">'celery'</span>, <span class="string">'beetroot'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Merge the second array into the first one</span></span><br><span class="line"><span class="comment">// Equivalent to vegetables.push('celery', 'beetroot');</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(vegetables, moreVegs);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vegetables); <span class="comment">// ['parsnip', 'potato', 'celery', 'beetroot']</span></span><br></pre></td></tr></table></figure>
<h2><span id="将arguments转换为数组">将arguments转换为数组</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> argArray = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure>
<h2><span id="判断是否为数组">判断是否为数组</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or use...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(obj); <span class="comment">// its a new Array method</span></span><br></pre></td></tr></table></figure>
<h2><span id="判断是否为数字">判断是否为数字</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(n)) &amp;&amp; <span class="built_in">isFinite</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="打散字符串为单个字符数组">打散字符串为单个字符（数组）</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.split(<span class="string">''</span>);</span><br></pre></td></tr></table></figure>
<h2><span id="创建自调用函数">创建自调用函数</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">// some private code that will be executed automatically</span></span><br><span class="line">&#125;)();</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> result = a + b;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;)(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<h2><span id="随机获取数组中元素">随机获取数组中元素</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = [<span class="number">12</span>, <span class="number">548</span> , <span class="string">'a'</span> , <span class="number">2</span> , <span class="number">5478</span> , <span class="string">'foo'</span> , <span class="number">8852</span>, , <span class="string">'Doe'</span> , <span class="number">2145</span> , <span class="number">119</span>];</span><br><span class="line"><span class="keyword">var</span> randomItem = items[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * items.length)];</span><br></pre></td></tr></table></figure>
<h2><span id="生成固定范围内的数组">生成固定范围内的数组</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbersArray = [], max = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">1</span>; numbersArray.push(i++) &lt; max;);  <span class="comment">// numbersArray = [1,2,3 ... 100]</span></span><br></pre></td></tr></table></figure>
<h2><span id="打乱数组顺序">打乱数组顺序</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , <span class="number">-215</span> , <span class="number">228</span> , <span class="number">400</span> , <span class="number">122205</span>, <span class="number">-85411</span>];</span><br><span class="line">numbers = numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>&#125;);</span><br><span class="line"><span class="comment">/* the array numbers will be equal for example to [120, 5, 228, -215, 400, 458, -85411, 122205]  */</span></span><br></pre></td></tr></table></figure>
<h2><span id="取得数组中最大或最小值">取得数组中最大或最小值</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , <span class="number">-215</span> , <span class="number">228</span> , <span class="number">400</span> , <span class="number">122205</span>, <span class="number">-85411</span>];</span><br><span class="line"><span class="keyword">var</span> maxInNumbers = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, numbers);</span><br><span class="line"><span class="keyword">var</span> minInNumbers = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, numbers);</span><br></pre></td></tr></table></figure>
<h2><span id="不要用delete删除数组中的元素">不要用delete删除数组中的元素</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = [<span class="number">12</span>, <span class="number">548</span> ,<span class="string">'a'</span> , <span class="number">2</span> , <span class="number">5478</span> , <span class="string">'foo'</span> , <span class="number">8852</span>, , <span class="string">'Doe'</span> ,<span class="number">2154</span> , <span class="number">119</span> ];</span><br><span class="line">items.length; <span class="comment">// return 11</span></span><br><span class="line"><span class="keyword">delete</span> items[<span class="number">3</span>]; <span class="comment">// return true</span></span><br><span class="line">items.length; <span class="comment">// return 11</span></span><br><span class="line"><span class="comment">/* items will be equal to [12, 548, "a", undefined × 1, 5478, "foo", 8852, undefined × 1, "Doe", 2154, 119]   */</span></span><br><span class="line"><span class="comment">// below is better</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> items = [<span class="number">12</span>, <span class="number">548</span> ,<span class="string">'a'</span> , <span class="number">2</span> , <span class="number">5478</span> , <span class="string">'foo'</span> , <span class="number">8852</span>, , <span class="string">'Doe'</span> ,<span class="number">2154</span> , <span class="number">119</span> ];</span><br><span class="line">items.length; <span class="comment">// return 11</span></span><br><span class="line">items.splice(<span class="number">3</span>,<span class="number">1</span>) ;</span><br><span class="line">items.length; <span class="comment">// return 10</span></span><br><span class="line"><span class="comment">/* items will be equal to [12, 548, "a", 5478, "foo", 8852, undefined × 1, "Doe", 2154, 119]   */</span></span><br></pre></td></tr></table></figure>
<h2><span id="缩减数组">缩减数组</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [<span class="number">12</span> , <span class="number">222</span> , <span class="number">1000</span> , <span class="number">124</span> , <span class="number">98</span> , <span class="number">10</span> ];</span><br><span class="line">myArray.length = <span class="number">4</span>; <span class="comment">// myArray will be equal to [12 , 222 , 1000 , 124].</span></span><br><span class="line"><span class="comment">//The array length is not a read only property.</span></span><br></pre></td></tr></table></figure>
<h2><span id="去除字符串前后空白">去除字符串前后空白</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果浏览器本身不支持String对象的trim方法,那么运行下面的代码可以兼容这些环境.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.trim) &#123;</span><br><span class="line">  <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>,<span class="string">''</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="注意区分布尔值truefalse-与-布尔对象的值truefalse">注意区分布尔值true/false 与 布尔对象的值true/false</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (b) <span class="comment">// this condition evaluates to true</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span></span></span><br></pre></td></tr></table></figure>
<h2><span id="闭包利用闭包模拟私有方法">[闭包]利用闭包模拟私有方法</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> makeCounter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeBy</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    privateCounter += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      changeBy(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      changeBy(<span class="number">-1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> privateCounter;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Counter1 = makeCounter();</span><br><span class="line"><span class="keyword">var</span> Counter2 = makeCounter();</span><br><span class="line">alert(Counter1.value()); <span class="comment">/* 提示 0 */</span></span><br><span class="line">Counter1.increment();</span><br><span class="line">Counter1.increment();</span><br><span class="line">alert(Counter1.value()); <span class="comment">/* 提示 2 */</span></span><br><span class="line">Counter1.decrement();</span><br><span class="line">alert(Counter1.value()); <span class="comment">/* 提示 1 */</span></span><br><span class="line">alert(Counter2.value()); <span class="comment">/* 提示 0 */</span></span><br></pre></td></tr></table></figure>
<h2><span id="数组排序函数">数组排序函数</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> +(a.value &gt; b.value) || +(a.value === b.value) - <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2><span id="将数组所有项累加">将数组所有项累加</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// total == 6</span></span><br></pre></td></tr></table></figure>
<h2><span id="数组扁平化">数组扁平化</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.concat(b);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<h2><span id="点击其他空白地方执行操作如关闭等">点击其他（空白）地方执行操作，如关闭等</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tarExts = [</span><br><span class="line">    $ele1,</span><br><span class="line">    $ele2</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = tarExts.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tarExts[i].is(e.target) || tarExts[i].has(e.target).length !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//do something when click on others</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装后</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">attachBlankTap</span>(<span class="params">targetsExcluded, callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tarExts = targetsExcluded;</span><br><span class="line">  <span class="comment">// convert to jQuery object</span></span><br><span class="line">  <span class="keyword">if</span> ($.isArray(tarExts)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = tarExts.length; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">'string'</span> === <span class="keyword">typeof</span> tarExts[i] || (<span class="string">'object'</span> === <span class="keyword">typeof</span> tarExts[i] &amp;&amp; !tarExts[i] <span class="keyword">instanceof</span> jQuery))</span><br><span class="line">        tarExts[i] = $(tarExts[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'string'</span> === <span class="keyword">typeof</span> tarExts || (<span class="string">'object'</span> === <span class="keyword">typeof</span> tarExts &amp;&amp; !tarExts <span class="keyword">instanceof</span> jQuery)) &#123;</span><br><span class="line">    tarExts = [ $(tarExts) ];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//add event</span></span><br><span class="line">  $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($.isArray(tarExts)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, m = tarExts.length; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tarExts[j].is(e.target) || tarExts[j].has(e.target).length !== <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//do something when click on others</span></span><br><span class="line">    <span class="keyword">if</span> (callback &amp;&amp; <span class="string">'function'</span> === <span class="keyword">typeof</span> callback) callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="复制对象">复制对象</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.clone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> copy;</span><br><span class="line">  copy = <span class="keyword">this</span>.constructor == <span class="built_in">Object</span> ? <span class="keyword">new</span> <span class="keyword">this</span>.constructor() : <span class="keyword">new</span> <span class="keyword">this</span>.constructor(<span class="keyword">this</span>.valueOf());</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(copy[key] != <span class="keyword">this</span>[key])&#123;</span><br><span class="line">      copy[key] = <span class="string">'object'</span> === <span class="keyword">this</span>[key] ? <span class="keyword">this</span>[key].clone() : <span class="keyword">this</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="firefox下设置或获取scrolltop需特定写法">Firefox下设置或获取scrollTop需特定写法</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollXY</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x,y;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.body.scrollTop)&#123; <span class="comment">//非标准写法,chrome能识别</span></span><br><span class="line">    x = <span class="built_in">document</span>.body.scrollLeft;</span><br><span class="line">    y = <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">//标准写法</span></span><br><span class="line">    x = <span class="built_in">document</span>.documentElement.scrollLeft;</span><br><span class="line">    y = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">x</span>:x, <span class="attr">y</span>:y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery写法</span></span><br><span class="line">$(<span class="string">"html, body"</span>).scrollTop()</span><br></pre></td></tr></table></figure>
<h2><span id="时间">时间</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取时间数值</span></span><br><span class="line">+<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br></pre></td></tr></table></figure>
<h2><span id="关闭打开窗口">关闭打开窗口</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> browserName = navigator.appName;</span><br><span class="line"><span class="keyword">if</span> (browserName == <span class="string">"Netscape"</span>) &#123;</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">''</span>, <span class="string">'_self'</span>, <span class="string">''</span>);</span><br><span class="line">  <span class="built_in">window</span>.close();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (browserName == <span class="string">"Microsoft Internet Explorer"</span>) &#123;</span><br><span class="line">  <span class="built_in">window</span>.opener = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">''</span>, <span class="string">'_top'</span>);</span><br><span class="line">  <span class="built_in">window</span>.top.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="sibling-elements">Sibling elements</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.siblings();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">[].filter.call(el.parentNode.children, <span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> child !== el;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2><span id="iframe-contents">Iframe Contents</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$iframe.contents();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">iframe.contentDocument;</span><br></pre></td></tr></table></figure>
<h2><span id="get-style">Get style</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.css(<span class="string">"color"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> Known bug, will return 'auto' if style value is 'auto'</span></span><br><span class="line"><span class="keyword">const</span> win = el.ownerDocument.defaultView;</span><br><span class="line"><span class="comment">// null means not return pseudo styles</span></span><br><span class="line">win.getComputedStyle(el, <span class="literal">null</span>).color;</span><br></pre></td></tr></table></figure>
<h2><span id="dom-remove">DOM - remove</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.remove();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.parentNode.removeChild(el);</span><br></pre></td></tr></table></figure>
<h2><span id="创建重复字符串">创建重复字符串</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> stringToRepeat = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">var</span> repeatStr = <span class="keyword">new</span> <span class="built_in">Array</span>(count + <span class="number">1</span>).join(stringToRepeat); <span class="comment">// aaa</span></span><br></pre></td></tr></table></figure>
<h2><span id="amp-按位与">&amp; (按位与)</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断一个数是否为2的n次幂，可以将其与自身减一相与</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">4</span></span><br><span class="line">(number &amp; number <span class="number">-1</span>) === <span class="number">0</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2><span id="按位异或">^ (按位异或)</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不用第三个变量，就可以交换两个变量的值</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>,</span><br><span class="line">    b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">a = a ^ b; <span class="comment">// 7</span></span><br><span class="line">b = a ^ b; <span class="comment">// 4</span></span><br><span class="line">a = a ^ b; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h2><span id="objectprototypetostring">Object.prototype.toString()</span></h2>
<p>在toString()方法被调用时,会执行下面的操作步骤:</p>
<blockquote>
<p>如果this的值为undefined,则返回&quot;[object Undefined]&quot;.
如果this的值为null,则返回&quot;[object Null]&quot;.
让O成为调用ToObject(this)的结果.
让class成为O的内部属性[[Class]]的值.
返回三个字符串&quot;[object &quot;, class, 以及 &quot;]&quot;连接后的新字符串.</p>
</blockquote>
<p>由于 JavaScript 中一切都是对象，任何都不例外，对所有值类型应用Object.prototype.toString.call()</p>
<p>方法结果如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">123</span>));          <span class="comment">//[object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="string">'123'</span>));        <span class="comment">//[object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>));    <span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>));         <span class="comment">//[object Boolean]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;));           <span class="comment">//[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([]));           <span class="comment">//[object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)); <span class="comment">//[object Function]</span></span><br></pre></td></tr></table></figure>
<p>所有类型都会得到不同的字符串，几乎完美。
在JavaScript中,想要判断某个对象值属于哪种内置类型,最靠谱的做法就是通过 <strong>Object.prototype.toString()</strong> 方法.</p>
<h2><span id="判断对象是否为空对象即不包含任何原始属性">判断对象是否为空对象，即不包含任何原始属性</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="显示网页所有元素轮廓">显示网页所有元素轮廓</span></h2>
<p>控制台中输入：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].forEach.call($$(<span class="string">"*"</span>),<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123; a.style.outline=<span class="string">"1px solid #"</span>+(~~(<span class="built_in">Math</span>.random()*(<span class="number">1</span>&lt;&lt;<span class="number">24</span>))).toString(<span class="number">16</span>) &#125;)</span><br></pre></td></tr></table></figure>
<h2><span id="利用a标签自动解析url">利用a标签自动解析URL</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseURL</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  a.href = url;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    source: url,</span><br><span class="line">    protocol: a.protocol.replace(<span class="string">':'</span>, <span class="string">''</span>),</span><br><span class="line">    host: a.hostname,</span><br><span class="line">    port: a.port,</span><br><span class="line">    query: a.search,</span><br><span class="line">    params: (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ret                 = &#123;&#125;,</span><br><span class="line">          seg                 = a.search.replace(<span class="regexp">/^\?/</span>, <span class="string">''</span>).split(<span class="string">'&amp;'</span>),</span><br><span class="line">          len = seg.length, i = <span class="number">0</span>, s;</span><br><span class="line">      <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!seg[i]) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s = seg[i].split(<span class="string">'='</span>);</span><br><span class="line">        ret[s[<span class="number">0</span>]] = s[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;)(),</span><br><span class="line">    file: (a.pathname.match(<span class="regexp">/\/([^\/?#]+)$/i</span>) || [, <span class="string">''</span>])[<span class="number">1</span>],</span><br><span class="line">    hash: a.hash.replace(<span class="string">'#'</span>, <span class="string">''</span>),</span><br><span class="line">    path: a.pathname.replace(<span class="regexp">/^([^\/])/</span>, <span class="string">'/$1'</span>),</span><br><span class="line">    relative: (a.href.match(<span class="regexp">/tps?:\/\/[^\/]+(.+)/</span>) || [, <span class="string">''</span>])[<span class="number">1</span>],</span><br><span class="line">    segments: a.pathname.replace(<span class="regexp">/^\//</span>, <span class="string">''</span>).split(<span class="string">'/'</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考： <a href="//james.padolsey.com/javascript/parsing-urls-with-the-dom/">Parsing URLs with the DOM!</a></p>
<h2><span id="利用tostring方法生成随机字符串">利用toString()方法生成随机字符串</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomAlphaNum</span>(<span class="params">len</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rdmString = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (; rdmString.length &lt; len; rdmString += <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> rdmString.substr(<span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="禁止别人以iframe加载你的页面">禁止别人以iframe加载你的页面</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.location != <span class="built_in">window</span>.parent.location) <span class="built_in">window</span>.parent.location = <span class="built_in">window</span>.location;</span><br></pre></td></tr></table></figure>
<h2><span id="参考">参考</span></h2>
<p><a href="//modernweb.com/2013/12/23/45-useful-javascript-tips-tricks-and-best-practices/">45 useful javascript tips tricks and best practices</a><br>
<a href="//github.com/oneuijs/You-Dont-Need-jQuery">You Don't Need jQuery</a><br>
<a href="//bonsaiden.github.io/JavaScript-Garden/zh">JavaScript 秘密花园</a><br>
<a href="//segmentfault.com/a/1190000002753931">盘点JavaScript里好用的原生API ꒰･◡･๑꒱</a><br>
<a href="//segmentfault.com/a/1190000002911253">关于原生js的一些研究</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码段 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript代码注释规范与示例]]></title>
      <url>//blog.tiy.xyz/posts/2016/1640409887/</url>
      <content type="html"><![CDATA[<!-- 摘要 -->
<p>JavaScript代码注释规范与示例</p>
<a id="more"></a>
<h2><span id="文件注释">文件注释</span></h2>
<p>文件注释位于文件的最前面，应包括文件的以下信息：概要说明及版本（必须）项目地址（开源组件必须）版权声明（必须）开源协议（开源组件必须）版本号（必须）修改时间（必须），以ISO格式表示（可使用Sublime Text的InsertDate插件插入）文件注释必须全部以英文字符表示，并存在于文件的开发版本与生产版本中。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> * jRaiser 2 Javascript Library</span></span><br><span class="line"><span class="comment"> * waterfall - v1.0.0 (2013-03-15T14:55:51+0800)</span></span><br><span class="line"><span class="comment"> * http://jraiser.org/ | Released under MIT license</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> * www.abc.com - v1.1 (2015-12-08 15:30:32 +0800)</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2014-2015 abc.com</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>如果文件内包含了一些开源组件，则必须在文件注释中进行说明。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> * jRaiser 2 Javascript Library</span></span><br><span class="line"><span class="comment"> * sizzle - v1.9.1 (2013-03-15T10:07:24+0800)</span></span><br><span class="line"><span class="comment"> * http://jraiser.org/ | Released under MIT license</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Include sizzle (http://sizzlejs.com/)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2><span id="普通注释">普通注释</span></h2>
<p>普通注释是为了帮助开发者和阅读者更好地理解程序，不会出现在API文档中。其中，单行注释以“ // ”开头；多行注释以“ /* ”开头，以“ */ ”结束。普通注释的使用需遵循以下规定。</p>
<p>总是在单行注释符后留一个空格。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is comment</span></span><br></pre></td></tr></table></figure>
<p>总是在多行注释的结束符前留一个空格（使星号对齐）。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>不要把注释写在多行注释的开始符、结束符所在行。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* start</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">end */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  here is line 1</span></span><br><span class="line"><span class="comment">  here is line 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>不要编写无意义的注释。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化value变量为0</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>如果某段代码有功能未实现，或者有待完善，必须添加“TODO”标记，“TODO”前后应留一个空格。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO 未处理IE6-8的兼容性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setOpacity</span>(<span class="params">node, val</span>) </span>&#123;</span><br><span class="line">  node.style.opacity = val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="文档注释jsdoc">文档注释(JSDoc)</span></h2>
<p>文档注释将会以预定格式出现在API文档中。它以“ /* ”开头，以“ */ ”结束，其间的每一行均以“ * ”开头（均与开始符的第一个“ * ”对齐），且注释内容与“ * ”间留一个空格。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * comment</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>文档注释必须包含一个或多个注释标签。</p>
<p>@module 声明模块，用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模块说明</span></span><br><span class="line"><span class="comment"> * @module 模块名</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Core模块提供最基础、最核心的接口</span></span><br><span class="line"><span class="comment"> * @module Core</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>@class 声明类，用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类说明</span></span><br><span class="line"><span class="comment"> * @class 类名</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>@class必须搭配@constructor或@static使用，分别标记非静态类与静态类。@constructor可以标识一个函数是构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节点集合类</span></span><br><span class="line"><span class="comment"> * @class NodeList</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> * @param &#123;ArrayLike&lt;Element&gt;&#125; nodes 初始化节点</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>@method 声明函数或类方法，用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法说明</span></span><br><span class="line"><span class="comment"> * @method 方法名</span></span><br><span class="line"><span class="comment"> * @for 所属类名</span></span><br><span class="line"><span class="comment"> * @param &#123;参数类型&#125; 参数名 参数说明</span></span><br><span class="line"><span class="comment"> * @return &#123;返回值类型&#125; 返回值说明</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>没有指定 @for 时，表示此函数为全局或模块顶层函数。当函数为静态函数时，必须添加@static；当函数有参数时，必须使用@param；当函数有返回值时，必须使用@return（多类返回值用@returns {*|Type} ）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前集合中指定位置的元素</span></span><br><span class="line"><span class="comment"> * @method</span></span><br><span class="line"><span class="comment"> * @for NodeList</span></span><br><span class="line"><span class="comment"> * @param &#123;Number&#125; [i=0] 位置下标。如果为负数，则从集合的最后一个元素开始倒数</span></span><br><span class="line"><span class="comment"> * @return &#123;Element&#125; 指定元素</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>@param 声明函数参数，必须与@method搭配使用。</p>
<p>当参数出现以下情况时，使用对应的格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[参数名]</span><br></pre></td></tr></table></figure>
<p>参数有默认值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[参数名=默认值]</span><br></pre></td></tr></table></figure>
<p>@property 声明类属性及说明，用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @property &#123;属性类型&#125; 属性名 属性描述</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2><span id="其他文档注释">其他文档注释</span></h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@author 指示代码的作者 </span><br><span class="line">@deprecated 指示一个函数已经废弃，而且在将来的代码版本中将彻底删除。要避免使用这段代码</span><br><span class="line">@version 指定发布版本</span><br><span class="line">@alias 函数或变量的别名</span><br><span class="line">@throws @exception 描述函数可能抛出的异常的类型</span><br><span class="line">@description 代码提示时显示被描述变量或者函数的描述信息</span><br><span class="line">@private 指示一个类或函数是私有的。私有类和函数不会出现在HTML文档中，除非运行JSDoc时提供了 --private 命令行选项</span><br><span class="line">@example 提示代码示例</span><br><span class="line">@extends &#123;type&#125; 标识继承于某个类型</span><br><span class="line">@type &#123;Type[,Type,...]&#125; 定义某个变量的类型</span><br><span class="line">@ignore JsDoc忽略有这个标记的函数</span><br></pre></td></tr></table></figure>
<h2><span id="参考">参考</span></h2>
<p>js/javascript代码注释规范与示例（原文链接失踪了）
<a href="https://code.google.com/p/jsdoc-toolkit/w/list" target="_blank" rel="noopener">jsdoc-toolkit</a><br>
<a href="http://usejsdoc.org/" target="_blank" rel="noopener">@use JSDoc</a><br>
<a href="http://ask.dcloud.net.cn/article/129" target="_blank" rel="noopener">JSDoc+规范</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码段 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS编码习惯和技巧]]></title>
      <url>//blog.tiy.xyz/posts/2016/2680227017/</url>
      <content type="html"><![CDATA[<!-- 摘要 -->
<p>CSS编码习惯和技巧，常用CSS代码段</p>
<a id="more"></a>
<h2><span id="quotlobotomized-owlquot-选择器">&quot;Lobotomized Owl&quot; 选择器</span></h2>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* + * &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="纯css滑动切换效果">纯CSS滑动切换效果</span></h2>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.slider</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: $VALUE$</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slider</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">1000px</span>; <span class="comment">/* has limits */</span></span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">3s</span> ease; <span class="comment">/* animate to max-height */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="使用属性选择器显示空文本链接">使用属性选择器显示空文本链接</span></h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^="http"]</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(href);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// html</span><br><span class="line">&lt;a href="http://www.bootstrap.com/"&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<h2><span id="为默认链接添加样式如通过cms系统添加的链接">为默认链接添加样式（如通过CMS系统添加的链接）</span></h2>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[class]</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#008000</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="使用-box-sizing-属性可以使用通配符通配符效率低是误区">使用 box-sizing 属性，可以使用通配符（通配符效率低是误区）</span></h2>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*, </span><br><span class="line">*<span class="selector-pseudo">:before</span>, </span><br><span class="line">*<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">       <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">            <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="//i.wanz.im/2012/01/03/performance_testing_about_css_universal_selector/">关于css通配符性能问题不完全测试</a></p>
<h2><span id="不要在选择器末尾使用-通用选择器">不要在选择器末尾使用 * 通用选择器。</span></h2>
<p>CSS 选择器匹配规则是从右往左，例如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mod</span> <span class="selector-class">.foo</span> * &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="块级元素右对齐">块级元素右对齐</span></h2>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block-right</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="让overflowauto页面滚动条出现时不跳动">让overflow:auto页面滚动条出现时不跳动</span></h2>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">1150px</span>) &#123; <span class="comment">/* for大屏幕 */</span>   </span><br><span class="line"><span class="selector-class">.wrap-outer</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="built_in">calc</span>(100vw - 100%);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="//www.zhangxinxu.com/wordpress/2015/01/css-page-scrollbar-toggle-center-no-jumping/">让overflow:auto页面滚动条出现时不跳动</a></p>
<h2><span id="参考">参考</span></h2>
<p><a href="//github.com/AllThingsSmitty/css-protips">CSS Protips</a><br>
<a href="//github.com/cssdream/css-creating">CSS 创作指南</a><br>
<a href="//shawphy.com/2010/11/css-universal-selector.html">CSS通用元素选择器的都市流言</a><br>
<a href="//i.wanz.im/2012/01/03/performance_testing_about_css_universal_selector/">关于css通配符性能问题不完全测试</a></p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码段 </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
